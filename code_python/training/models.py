from ngboost import NGBRegressor
from sklearn.ensemble import HistGradientBoostingRegressor, RandomForestRegressor
from sklearn.kernel_ridge import KernelRidge
from sklearn.linear_model import Lasso, LinearRegression
from sklearn.neighbors import KNeighborsRegressor
from sklearn.svm import SVR
from skopt.space import Categorical, Integer, Real
from xgboost import XGBRegressor

regressor_factory: dict[str, type] = {
    "MLR":   LinearRegression,
    "Lasso": Lasso,
    "KRR":   KernelRidge,
    "KNN":   KNeighborsRegressor,
    "SVR":   SVR,
    "RF":    RandomForestRegressor,
    "XGB":   XGBRegressor,
    "HGB":   HistGradientBoostingRegressor,
    "NGB":   NGBRegressor,
    # "GP":    GaussianProcessRegressor,  # ATTN: Not actually this one
    # "NN":    MLPRegressor,  # ATTN: Not actually this one
}

regressor_search_space: dict[str, dict] = {
    "MLR":   {"regressor__fit_intercept": [True, False]},
    "Lasso": {"regressor__alpha":         Real(1e-3, 1e3, prior="log-uniform"),
              "regressor__fit_intercept": [True, False],
              "regressor__selection":      Categorical(["cyclic", "random"]),
              },
    "KRR":   {"regressor__alpha":  Real(1e-3, 1e3, prior="log-uniform"),
              "regressor__kernel": Categorical(["linear", "rbf", "poly", "sigmoid", "cosine"]),
              "regressor__gamma":  Real(1e-3, 1e3, prior="log-uniform"),
              },
    "KNN":   {"regressor__n_neighbors": Integer(1, 100),
              "regressor__weights":     Categorical(["uniform", "distance"]),
              "regressor__algorithm":   Categorical(["auto", "ball_tree", "kd_tree", "brute"]),
              "regressor__leaf_size":   Integer(1, 100),
              "regressor__p":           Integer(1, 5),
              },
    "SVR":   {"regressor__kernel": Categorical(["linear", "rbf", "poly", "sigmoid"]),
              "regressor__gamma":  Real(1e-3, 1e3, prior="log-uniform"),
              },
    "RF":    {"regressor__n_estimators":      Integer(50, 2000),
              "regressor__max_depth":         Integer(10, 10000),
              "regressor__min_samples_split": Real(0.005, 1),
              "regressor__min_samples_leaf":  Real(0.005, 1),
              "regressor__max_features":      Real(0.5, 1.0),
              },
    "XGB":   {"regressor__n_estimators":      Integer(50, 2000),
              "regressor__max_depth":         Integer(10, 10000),
              "regressor__learning_rate":     Real(0.005, 1),
              "regressor__subsample":         Real(0.5, 1.0),
              "regressor__colsample_bytree":  Real(0.5, 1.0),
              "regressor__colsample_bylevel": Real(0.5, 1.0),
              },
    "HGB":   {"regressor__loss":              Categorical(["absolute_error", "squared_error", "quantile", "poisson"]),
              "regressor__learning_rate":     Real(0.005, 1),
              "regressor__max_depth":         Integer(10, 10000),
              "regressor__min_samples_leaf":  Integer(1, 600),
              "regressor__max_iter":          Integer(50, 2000),
              "regressor__l2_regularization": Real(0.005, 1),
              "regressor__max_bins":          Integer(10, 255),
              "regressor__early_stopping":    [True],
              "regressor__n_iter_no_change":  Integer(1, 10),
              },
    "NGB":   {"regressor__n_estimators":     Integer(50, 2000),
              "regressor__learning_rate":    Real(0.005, 1),
              "regressor__minibatch_frac":   Real(0.1, 1),
              "regressor__minibatch_size":   Integer(1, 100),
              # "regressor__Base":             Categorical(["DecisionTreeRegressor", "Ridge", "Lasso",
              #                                            "KernelRidge", "SVR"]),
              "regressor__natural_gradient": [True, False],
              "regressor__verbose":          [False],
              },
    # "GP":  {"regressor__kernel": Categorical("linear", "rbf", "poly", "sigmoid"),
    #         "regressor__gamma":  Real(1e-3, 1e3, prior="log-uniform"),
    #         },
    # "NN":  {"regressor__hidden_layer_sizes": Integer(1, 100),
    #         "regressor__activation":         Categorical("identity", "logistic", "tanh", "relu"),
    #         "regressor__solver":             Categorical("lbfgs", "sgd", "adam"),
    #         "regressor__alpha":              Real(1e-3, 1e3, prior="log-uniform"),
    #         "regressor__learning_rate":      Categorical("constant", "invscaling", "adaptive"),
    #         "regressor__max_iter":           Integer(50, 2000),
    #         "regressor__early_stopping":     [True, False],
    #         "regressor__validation_fraction":Real(0.005, 0.5),
    #         "regressor__beta_1":             Real(0.005, 0.5),
    #         "regressor__beta_2":             Real(0.005, 0.5),
    #         "regressor__epsilon":            Real(1e-9, 1e-7),
    #         },
}
