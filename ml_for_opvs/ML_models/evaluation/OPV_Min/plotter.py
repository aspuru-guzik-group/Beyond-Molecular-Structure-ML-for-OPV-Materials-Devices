import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import mean_squared_error


def parity_plot(y_test, yhat, y_max):
    """Creates a parity plot for two column data (predicted data and ground truth data)"""
    y_test = y_test
    yhat = yhat
    # find slope and y-int of linear line of best fit
    m, b = np.polyfit(y_test, yhat, 1,)
    print(m, b)
    # find correlation coefficient
    corr_coef = np.corrcoef(y_test, yhat,)[0, 1]
    # find rmse
    rmse = np.sqrt(mean_squared_error(y_test, yhat,))

    fig, ax = plt.subplots()
    # ax.set_title("Predicted vs. Experimental PCE (%)", fontsize=22)
    ax.set_xlabel("Experimental_PCE_(%)", fontsize=18)
    ax.set_ylabel("Predicted_PCE_(%)", fontsize=18)
    ax.scatter(
        y_test, yhat, s=4, alpha=0.7, color="#0AB68B",
    )
    ax.plot(
        y_test,
        m * y_test + b,
        color="black",
        label=[
            "R: " + str(round(corr_coef, 3)) + "  " + "RMSE: " + str(round(rmse, 3))
        ],
    )
    ax.plot([0, 1], [0, 1], "--", color="blue", label="Perfect Correlation")
    ax.legend(loc="upper left", fontsize=14)
    ax.tick_params(axis="both", which="major", labelsize=14)
    # add text box with slope and y-int
    # textstr = "slope: " + str(m) + "\n" + "y-int: " + str(b)
    # ax.text(0.5, 0.5, textstr, wrap=True, verticalalignment="top")
    plt.show()


y_test = np.array(
    [
        0.6296029,
        0.60361004,
        0.2772563,
        0.6902527,
        0.74873644,
        0.7978339,
        0.5949458,
        0.8397112,
        0.532852,
        0.599278,
        0.75812274,
        0.61155236,
        0.8808664,
        0.6541516,
        0.77256316,
        0.7610108,
        0.70180506,
        0.83898914,
        0.84693134,
        0.58628154,
        0.8880866,
        0.8231046,
        0.7263538,
        0.83754516,
        0.6787003,
        0.2837545,
        0.22166064,
        0.8086642,
        0.868592,
        0.30252707,
        0.33935016,
        0.3971119,
        0.53429604,
        0.15740073,
        0.28664258,
        0.9805054,
        0.72707576,
        0.8592057,
        0.6216606,
        0.7870036,
        0.8382671,
        0.967509,
        0.52418774,
        0.0050541516,
        0.2505415,
        0.56895304,
        0.46209386,
        0.7119133,
        0.7761733,
        0.8036101,
        0.76317686,
        0.7386281,
        0.4440433,
        0.73646206,
        0.6166065,
        0.66787004,
        0.69241875,
        0.87003607,
        0.566787,
        0.6064981,
        0.54801446,
        0.48953068,
        0.22454873,
        0.535018,
        0.7075812,
        0.6166065,
        0.6375451,
        0.8288808,
        0.63898915,
        0.6577617,
        0.75812274,
        0.41877258,
        0.7509025,
        0.4166065,
        0.6498195,
        0.6108303,
        0.50758123,
        0.33212996,
    ]
)
yhat = np.array(
    [
        0.6932678306438774,
        0.5256530288956506,
        0.5211010082247972,
        0.5375077070527524,
        0.6064557358295589,
        0.7881818451658368,
        0.7495137278056433,
        0.7275590807755988,
        0.7076967278527194,
        0.7412233149140833,
        0.6728693002785459,
        0.6325435439228605,
        0.6313425458852863,
        0.7100812377898912,
        0.8196951480638243,
        0.6654580374447684,
        0.7302563574518385,
        0.6711933972183778,
        0.7781943845539062,
        0.798407796587914,
        0.7341058090614533,
        0.7471842359095003,
        0.7162916694422347,
        0.7690336603362123,
        0.8157988190547255,
        0.5992610688937584,
        -0.07197959880343163,
        0.7524944228626044,
        0.7588773601428535,
        0.5718641288382568,
        0.5429132860824258,
        0.5956872072564955,
        0.5695811554286917,
        0.6691342123952123,
        0.6183293243091584,
        0.7351977944204938,
        0.6362504211229157,
        0.9525167857245006,
        0.5962083860132493,
        0.6783664351910029,
        0.6460111720485141,
        0.8893180580843806,
        0.7036538842316341,
        0.1707451374210437,
        0.6920728592850273,
        0.5720115952284638,
        0.7162139681073033,
        0.602113054244347,
        0.6921783095231341,
        0.677546255765768,
        0.678736050317614,
        0.6781308544656098,
        0.5223585242956822,
        0.00027041368547842115,
        0.538866069112906,
        0.7256782307208617,
        0.7162916694422347,
        1.035412182616735,
        0.5884871812812175,
        -0.823426525034831,
        -0.7381179442282749,
        -0.780332824855181,
        0.3093690954447318,
        0.34195866732423197,
        0.5612313076352705,
        0.7590114410010128,
        0.6024905498674052,
        0.5403805184703173,
        0.5932148655125499,
        0.672502921064794,
        0.7194849296650446,
        0.6656247638850651,
        0.6664809300428519,
        0.5688867859560306,
        0.5334951748366351,
        0.6521542530172356,
        0.6504548312625537,
        0.48512324480676006,
    ]
)

parity_plot(y_test, yhat, 13.85)
